# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Mon Apr 18 13:27:06 2022
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import sys, os
from subprocess import PIPE, Popen, check_output
import configparser
import webbrowser
from EventDialog import EventDialog
from OptionDialog import OptionDialog
from ScriptDialog import ScriptDialog

def get_host_kernel_version():
    """Get host's kernel version""" 
    command = "uname -r"
    process = Popen(args=command, stdout=PIPE, shell=True, universal_newlines=True)
    result = process.communicate()[0].replace('\n','')
    return result

def get_inotif_tools_version():
    """Get host's kernel version"""
    command = "pacman -Q inotify-tools | cut -d ' ' -f 2"
    process = Popen(args=command, stdout=PIPE, shell=True, universal_newlines=True)
    result = process.communicate()[0].replace('\n','')
    return result

def get_wxwidgets_version():
    """Get host's kernel version"""
    command = "pacman -Q wxgtk3 | cut -d ' ' -f 2"
    process = Popen(args=command, stdout=PIPE, shell=True, universal_newlines=True)
    result = process.communicate()[0].replace('\n','')
    return result

def run_inotify_script(command):
    """Get host's kernel version"""
    #command = ""
    process = Popen(args=command, stdout=PIPE, shell=True, universal_newlines=True)
    result = process.communicate()[0].replace('\n','')
    return result

VERSION = "0.1.0"

#VersionString = "Linux: 5.16.12-lqx1-1-lqx  inotify-tools: 3.22.1.0  guinotify: 1.0.1  wxWidgets: 3.0.5  wxPython: 4.1.1  Python: 3.10.4"
#print (len(VersionString))
VersionString = "Linux: " + os.uname()[2] + "  inotify-tools: " + get_inotif_tools_version() + "  guinotify: " + VERSION + \
    "  wxWidgets: " + get_wxwidgets_version() + "  wxPython: " + wx.__version__ + "  Python: " + '.'.join([str(value) for value in sys.version_info[0:3]])
#print (len(VersionString))
# end wxGlade


class MainDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainDialog.__init__
        #print("")
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((760, 400))
        self.SetTitle(_("guinotify"))
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("128x128.png", wx.BITMAP_TYPE_ANY))
        #/home/mic/Projekte/guinotify/128x128.png
        self.SetIcon(_icon)

        bmp_events = wx.Bitmap("images/events-16x16.png")
        bmp_options = wx.Bitmap("images/options-16x16.png")
        bmp_script = wx.Bitmap("images/script-16x16.png")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.lsNotifications = wx.ListCtrl(self.panel_1, wx.ID_ANY, style=wx.BORDER_DEFAULT | wx.FULL_REPAINT_ON_RESIZE | wx.LC_EDIT_LABELS | wx.LC_HRULES | wx.LC_REPORT | wx.LC_SINGLE_SEL | wx.LC_VRULES)
        self.lsNotifications.AppendColumn(_("File/Dir"), format=wx.LIST_FORMAT_LEFT, width=200)
        self.lsNotifications.AppendColumn(_("Event"), format=wx.LIST_FORMAT_LEFT, width=150)
        self.lsNotifications.AppendColumn(_("Options"), format=wx.LIST_FORMAT_LEFT, width=150)
        self.lsNotifications.AppendColumn(_("DoWhat"), format=wx.LIST_FORMAT_LEFT, width=200)
        self.lsNotifications.AppendColumn(_("Active"), format=wx.LIST_FORMAT_LEFT, width=50)
        item = wx.ListItem()
        item.SetText("/var/lib/boinc/job_log_milkyway.cs.rpi.edu_milkyway.txt")
        item.SetId(0)

        self.lsNotifications.InsertItem(item)
        #self.lsNotifications.InsertItem(1, "/var/lib/boinc/job_log_milkyway.cs.rpi.edu_milkyway.txt")

        #self.lsNotifications.InsertItem(2, "watch2")
        #self.lsNotifications.InsertItem(3, "watch3")
        #self.lsNotifications.InsertItem(4, "watch4")
        #self.lsNotifications.InsertItem(5, "watch5")

        # TESTDATEN
        self.lsNotifications.SetItem(0,1,"MODIFY", -1);
        self.lsNotifications.SetItem(0,2,"--no-dereference", -1); # --monitor
        self.lsNotifications.SetItem(0,3,"echo -e \\07 ; espeak-ng -vmb-de5 'Task fertig.' -s 175", -1);
        self.lsNotifications.SetItem(0,4,"Yes", -1);
        
        sizer_3.Add(self.lsNotifications, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, VersionString)
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 5)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL | wx.SHAPED, 4)

        #self.button_OK = wx.Button(self, wx.ID_OK, "Script")
        #self.button_OK.SetDefault()
        #sizer_2.AddButton(self.button_OK)

        #self.button_CANCEL = wx.Button(self, wx.ID_HOME, "")
        #sizer_2.Add(self.button_CANCEL, 0, 0, 0)

        self.button_EV = wx.Button(self, wx.ID_NO, "Events")
        self.button_EV.SetBitmap(bmp_events)
        sizer_2.Add(self.button_EV)

        sizer_2.AddSpacer(10)

        self.button_OP = wx.Button(self, wx.ID_APPLY, "Options")
        self.button_OP.SetBitmap(bmp_options)
        sizer_2.Add(self.button_OP)

        sizer_2.AddSpacer(10)

        self.button_SC = wx.Button(self, wx.ID_UNDO, "Script")
        self.button_SC.SetBitmap(bmp_script)
        sizer_2.Add(self.button_SC) #, 0, 0, 0)

        sizer_2.Add((100, 20), 100, 20, 20)

        self.button_HELP = wx.Button(self, wx.ID_HELP, "")
        sizer_2.AddButton(self.button_HELP)

        self.button_CLOSE = wx.Button(self, wx.ID_CLOSE, "")
        sizer_2.AddButton(self.button_CLOSE)

        sizer_2.Realize()

        self.panel_1.SetSizer(sizer_3)

        self.SetSizer(sizer_1)

        #self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CLOSE.GetId())
        #self.SetAffirmativeId(self.button_CLOSE.GetId())

        self.Layout()
        self.Centre()

        self.lsNotifications.Bind(wx.EVT_LIST_COL_CLICK, self.Col_Select)
        self.lsNotifications.Bind(wx.EVT_LIST_DELETE_ITEM, self.Item_Delete)
        self.lsNotifications.Bind(wx.EVT_LIST_END_LABEL_EDIT, self.Item_Edited)
        self.lsNotifications.Bind(wx.EVT_LIST_INSERT_ITEM, self.Item_Insert)
        self.lsNotifications.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.Item_Active)
        self.lsNotifications.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.Item_Focus)
        self.lsNotifications.Bind(wx.EVT_LIST_ITEM_SELECTED, self.Item_Select)

        #self.button_OK.Bind(wx.EVT_BUTTON, self.btnOK_click)
        self.button_EV.Bind(wx.EVT_BUTTON, self.btnEVENTS_click)
        self.button_SC.Bind(wx.EVT_BUTTON, self.btnSCRIPT_click)
        self.button_OP.Bind(wx.EVT_BUTTON, self.btnOPTIONS_click)

        #self.button_CANCEL.Bind(wx.EVT_BUTTON, self.btnCANCEL_click)
        self.button_HELP.Bind(wx.EVT_BUTTON, self.btnHELP_click)
        self.button_CLOSE.Bind(wx.EVT_BUTTON, self.btnCLOSE_click)
        # end wxGlade

    def btnOK_click(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'btnOK_click' not implemented!")
        event.Skip()

    def btnEVENTS_click(self, event):  # wxGlade: MainDialog.<event_handler>                FÜR EVENTS
        selectedItem = self.lsNotifications.GetFirstSelected()
        if selectedItem >= 0:
            #print("Event handler 'btnEVENTS_click' not implemented!")
            self.dialog_Event = EventDialog(None, wx.ID_ANY, "")
            #self.SetTopWindow(self.dialog_Event)
            self.dialog_Event.ShowModal()
            self.dialog_Event.Destroy()
            return True
        event.Skip()

    def btnSCRIPT_click(self, event):  # wxGlade: MainDialog.<event_handler>                FÜR SCRIPT
        selectedItem = self.lsNotifications.GetFirstSelected()
        if selectedItem >= 0:
            #print("Event handler 'btnSCRIPT_click' not implemented!")
            self.dialog_Script = ScriptDialog(None, wx.ID_ANY, "")
            #self.SetTopWindow(self.dialog_Script)
            self.dialog_Script.ShowModal()
            self.dialog_Script.Destroy()
            return True
        event.Skip()

    def btnOPTIONS_click(self, event):  # wxGlade: MainDialog.<event_handler>               FÜR OPTIONS
        selectedItem = self.lsNotifications.GetFirstSelected()
        if selectedItem >= 0:
            #print("Event handler 'btnOPTIONS_click' not implemented!")
            self.dialog_Option = OptionDialog(None, wx.ID_ANY, "")
            #self.SetTopWindow(self.dialog_Event)
            self.dialog_Option.ShowModal()
            self.dialog_Option.Destroy()
            return True
        event.Skip()

    def btnCANCEL_click(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'btnCANCEL_click' not implemented!")
        event.Skip()

    def btnHELP_click(self, event):  # wxGlade: MainDialog.<event_handler>
        #print("Event handler 'btnHELP_click' not implemented!")
        url = 'https://github.com/amstelchen/guinotify'
        webbrowser.open(url)
        event.Skip()

    def btnCLOSE_click(self, event):  # wxGlade: MainDialog.<event_handler>
        #print("Event handler 'btnCLOSE_click' not implemented!")
        #self.lsNotifications.GetItem(self.lsNotifications.GetSelection())
        selectedItem = self.lsNotifications.GetFirstSelected()
        if selectedItem > 0:
            #print(selectedItem)
            selectedCol_FileDir = self.lsNotifications.GetItem(selectedItem).Text
            selectedCol_Event = self.lsNotifications.GetItem(selectedItem, 1).Text
            selectedCol_Options = self.lsNotifications.GetItem(selectedItem, 2).Text
            selectedCol_Script = self.lsNotifications.GetItem(selectedItem, 3).Text
            #print(str(se.Text) + " " + str(se1.Text))
            command = "while true; do " + "inotifywait -d -o /dev/null -e " + selectedCol_Event + " " + selectedCol_Options + " " + selectedCol_FileDir + " && " + selectedCol_Script + "; done"
            print(command)
            #run_inotify_script(command)
        event.Skip()

    def Item_Select(self, event):  # wxGlade: MainDialog.<event_handler>
        #print("Event handler 'Item_Select' not implemented!")
        pass
        #self.dialog_Event = EventDialog(None, wx.ID_ANY, "")
        #self.SetTopWindow(self.dialog_Event)
        #self.dialog_Event.ShowModal()
        #self.dialog_Event.Destroy()
        #return True
        #event.Skip()

    def Col_Select(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'Col_Select' not implemented!")
        event.Skip()

    def Item_Focus(self, event):  # wxGlade: MainDialog.<event_handler>
        #print("Event handler 'Item_Focus' not implemented!")
        event.Skip()

    def Item_Delete(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'Item_Delete' not implemented!")
        event.Skip()

    def Item_Insert(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'Item_Insert' not implemented!")
        event.Skip()

    def Item_Active(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'Item_Active' not implemented!")
        event.Skip()

    def Item_Edited(self, event):  # wxGlade: MainDialog.<event_handler>
        print("Event handler 'Item_Edited' not implemented!")
        event.Skip()
# end of class MainDialog
